{"version":3,"sources":["serviceWorker.js","components/WelcomeButton.js","components/QuoteBox.js","components/MainPage.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","WelcomeButton","props","className","exitAnimation","id","onClick","welcomeClickHandler","QuoteBox","fade","quote","author","tweetAction","getQuote","MainPage","welcome","setState","setTimeout","quotesList","quotes","listLength","length","randIndex","Math","floor","random","index","open","encodeURI","this","React","Component","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2200db4b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport \"../styles/components/WelcomeButton.scss\";\n\nconst WelcomeButton = (props) => {\n  return (\n    <button\n      className={\n        props.exitAnimation\n          ? \"animate__animated animate__flipOutX\"\n          : \"animate__animated animate__bounceIn\"\n      }\n      id=\"button_welcome\"\n      onClick={props.welcomeClickHandler}\n    >\n      Generate Quote\n    </button>\n  );\n};\n\nexport default WelcomeButton;\n","import React from \"react\";\nimport \"../styles/components/QuoteBox.scss\";\n\nconst QuoteBox = (props) => {\n  return (\n    <div id=\"quote-box\" className={\"animate__animated animate__zoomInUp \"}>\n      <div className={props.fade ? \"fade\" : \"\"}>\n        <p id=\"quotes\">\"</p>\n        <p id=\"text\">{props.quote.quote}</p>\n        <p id=\"author\">{props.quote.author}</p>\n      </div>\n      <div id=\"quote-box-buttons\">\n        <button id=\"quote-box-buttons--twitter\" onClick={props.tweetAction}>\n          Tweet\n        </button>\n        <button id=\"quote-box-buttons--next\" onClick={props.getQuote}>\n          &gt;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuoteBox;\n","import React from \"react\";\nimport WelcomeButton from \"./WelcomeButton\";\nimport QuoteBox from \"./QuoteBox\";\nimport quotes from \"../assets/quotes.json\";\n\nclass MainPage extends React.Component {\n  state = {\n    welcome: true,\n    exitAnimation: false,\n    fade: false,\n    quote: null,\n  };\n\n  welcomeClickHandler = () => {\n    this.getQuote();\n    this.setState(() => ({\n      exitAnimation: true,\n    }));\n    setTimeout(() => this.setState(() => ({ welcome: false })), 700);\n  };\n\n  getQuote = () => {\n    const quotesList = quotes.quotes;\n    const listLength = quotesList.length;\n    let randIndex = Math.floor(Math.random() * listLength);\n\n    if (this.state.quote && randIndex === this.state.quote.index) {\n      while (randIndex === this.state.quote.index) {\n        randIndex = Math.floor(Math.random() * listLength);\n      }\n    }\n\n    // prevent multiple clicks\n    if (!this.state.fade) {\n      this.setState(() => ({ fade: true }));\n      setTimeout(\n        () =>\n          this.setState(() => ({\n            quote: { ...quotesList[randIndex], index: randIndex },\n          })),\n        500\n      );\n      setTimeout(() => this.setState(() => ({ fade: false })), 1000);\n    }\n  };\n  tweetAction = () => {\n    window.open(\n      encodeURI(\n        \"https://twitter.com/intent/tweet?text=\" +\n          this.state.quote.quote +\n          \"&hashtags=Quotes\"\n      ),\n      \"_blank\"\n    );\n  };\n  render() {\n    return (\n      <div>\n        {this.state.welcome && (\n          <WelcomeButton\n            exitAnimation={this.state.exitAnimation}\n            welcomeClickHandler={this.welcomeClickHandler}\n          />\n        )}\n        {!this.state.welcome && (\n          <QuoteBox\n            getQuote={this.getQuote}\n            quote={this.state.quote}\n            fade={this.state.fade}\n            tweetAction={this.tweetAction}\n          />\n        )}\n      </div>\n    );\n  }\n}\nexport default MainPage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/main.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport MainPage from \"./components/MainPage\";\nimport \"normalize.css\";\nimport \"animate.css\";\nimport \"./styles/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainPage />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}